// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MusicDatabase.Data;
using System;

namespace MusicDatabase.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    partial class MusicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:pg_buffercache", "'pg_buffercache', '', ''")
                .HasAnnotation("Npgsql:PostgresExtension:pg_stat_statements", "'pg_stat_statements', '', ''")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("MusicDatabase.Data.Tables.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("album_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("AlbumName")
                        .HasColumnName("album_name")
                        .HasColumnType("varchar");

                    b.Property<int?>("ArtistId")
                        .HasColumnName("artist_id");

                    b.Property<string>("Barcode")
                        .HasColumnName("barcode")
                        .HasColumnType("varchar");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar");

                    b.Property<bool?>("IsSingle")
                        .HasColumnName("is_single");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnName("release_year");

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MusicDatabase.Data.Tables.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("artist_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ArtistName")
                        .HasColumnName("artist_name")
                        .HasColumnType("varchar");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar");

                    b.Property<bool?>("IsGroup")
                        .HasColumnName("is_group");

                    b.Property<string>("RealName")
                        .HasColumnName("real_name")
                        .HasColumnType("varchar");

                    b.Property<int?>("StartedYear")
                        .HasColumnName("started_year");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MusicDatabase.Data.Tables.Featuring", b =>
                {
                    b.Property<int>("FeaturingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("featuring_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ArtistId")
                        .HasColumnName("artist_id");

                    b.Property<int?>("SongId")
                        .HasColumnName("song_id");

                    b.HasKey("FeaturingId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("Featurings");
                });

            modelBuilder.Entity("MusicDatabase.Data.Tables.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("genre_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("GenreName")
                        .HasColumnName("genre_name")
                        .HasColumnType("varchar");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MusicDatabase.Data.Tables.Lyric", b =>
                {
                    b.Property<int>("LyricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lyric_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasColumnType("varchar");

                    b.Property<string>("Lyrics1")
                        .HasColumnName("lyrics");

                    b.Property<int?>("SongId")
                        .HasColumnName("song_id");

                    b.HasKey("LyricId");

                    b.HasIndex("SongId")
                        .IsUnique();

                    b.ToTable("Lyrics");
                });

            modelBuilder.Entity("MusicDatabase.Data.Tables.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("song_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("AlbumId")
                        .HasColumnName("album_id");

                    b.Property<int?>("ArtistId")
                        .HasColumnName("artist_id");

                    b.Property<int?>("GenreId")
                        .HasColumnName("genre_id");

                    b.Property<bool?>("IsFeaturing")
                        .HasColumnName("is_featuring");

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasColumnType("varchar");

                    b.Property<string>("SongName")
                        .HasColumnName("song_name")
                        .HasColumnType("varchar");

                    b.HasKey("SongId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicDatabase.Data.Tables.Album", b =>
                {
                    b.HasOne("MusicDatabase.Data.Tables.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId");
                });

            modelBuilder.Entity("MusicDatabase.Data.Tables.Featuring", b =>
                {
                    b.HasOne("MusicDatabase.Data.Tables.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId");

                    b.HasOne("MusicDatabase.Data.Tables.Song", "Song")
                        .WithMany("Featurings")
                        .HasForeignKey("SongId");
                });

            modelBuilder.Entity("MusicDatabase.Data.Tables.Lyric", b =>
                {
                    b.HasOne("MusicDatabase.Data.Tables.Song", "Song")
                        .WithOne("Lyric")
                        .HasForeignKey("MusicDatabase.Data.Tables.Lyric", "SongId");
                });

            modelBuilder.Entity("MusicDatabase.Data.Tables.Song", b =>
                {
                    b.HasOne("MusicDatabase.Data.Tables.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId");

                    b.HasOne("MusicDatabase.Data.Tables.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId");

                    b.HasOne("MusicDatabase.Data.Tables.Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId");
                });
#pragma warning restore 612, 618
        }
    }
}
